<?xml version="1.0" encoding="UTF-8"?>
<project name="K9Tests" default="help">

    <!-- The local.properties file is created and updated by the 'android' tool.
         It contains the path to the SDK. It should *NOT* be checked into
         Version Control Systems. -->
    <property file="local.properties" />

    <!-- The ant.properties file can be created by you. It is only edited by the
         'android' tool to add properties to it.
         This is the place to change some Ant specific build properties.
         Here are some properties you may want to change/update:

         source.dir
             The name of the source directory. Default is 'src'.
         out.dir
             The name of the output directory. Default is 'bin'.

         For other overridable properties, look at the beginning of the rules
         files in the SDK, at tools/ant/build.xml

         Properties related to the SDK location or the project target should
         be updated using the 'android' tool with the 'update' action.

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems.

         -->
    <property file="ant.properties" />

    <!-- The project.properties file is created and updated by the 'android'
         tool, as well as ADT.

         This contains project specific properties such as project target, and library
         dependencies. Lower level build properties are stored in ant.properties
         (or in .classpath for Eclipse projects).

         This file is an integral part of the build system for your
         application and should be checked into Version Control Systems. -->
    <loadproperties srcFile="project.properties" />

    <!-- quick check on sdk.dir -->
    <fail
            message="sdk.dir is missing. Make sure to generate local.properties using 'android update project' or to inject it through an env var"
            unless="sdk.dir"
    />

    <!--
        Import per project custom build rules if present at the root of the project.
        This is the place to put custom intermediary targets such as:
            -pre-build
            -pre-compile
            -post-compile (This is typically used for code obfuscation.
                           Compiled code location: ${out.classes.absolute.dir}
                           If this is not done in place, override ${out.dex.input.absolute.dir})
            -post-package
            -post-build
            -pre-clean
    -->
    <import file="custom_rules.xml" optional="true" />

    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
    <import file="${sdk.dir}/tools/ant/build.xml" />

    <!-- K-9 CUSTOM STUFF -->

    <property name="junit-file" location="junit-report.xml" />

    <!-- This is overridden because otherwise it deletes coverage.em after extraction, requiring
         another compile. Also, test.runner can be changed here instead of in ant.properties, and
         the code to pull the results is integrated. Changes are commented because from looking at
         r20-preview, this might break and need to be redone. -->
    <target name="test" depends="-test-project-check"
                description="OVERRIDE: Runs tests from the package defined in test.package property">

        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />

        <property name="test.runner" value="com.zutubi.android.junitreport.JUnitReportTestRunner" /><!-- changed from original -->

        <!-- Application package of the tested project extracted from its manifest file -->
        <xpath input="${tested.project.absolute.dir}/AndroidManifest.xml"
                expression="/manifest/@package" output="tested.manifest.package" />
        <xpath input="AndroidManifest.xml"
                expression="/manifest/@package" output="manifest.package" />

        <property name="emma.dump.file"
                value="/data/data/${tested.manifest.package}/coverage.ec" />

        <if condition="${emma.enabled}">
            <then>
                <echo>WARNING: Code Coverage is currently only supported on the emulator and rooted devices.</echo>
                <run-tests-helper emma.enabled="true">
                    <extra-instrument-args>
                        <arg value="-e" />
                           <arg value="coverageFile" />
                           <arg value="${emma.dump.file}" />
                    </extra-instrument-args>
                </run-tests-helper>
                <echo>Downloading coverage file into project directory...</echo>
                <exec executable="${adb}" failonerror="true">
                    <arg line="${adb.device.arg}" />
                    <arg value="pull" />
                    <arg value="${emma.dump.file}" />
                    <arg value="coverage.ec" />
                </exec>
                <echo>Extracting coverage report...</echo>
                <emma>
                    <report sourcepath="${tested.project.absolute.dir}/${source.dir}"
                                      verbosity="${verbosity}">
                        <!-- TODO: report.dir or something like should be introduced if necessary -->
                        <infileset dir=".">
                            <include name="coverage.ec" />
                            <include name="coverage.em" />
                        </infileset>
                        <!-- TODO: reports in other, indicated by user formats -->
                        <html outfile="coverage.html" />
                        <xml outfile="coverage.xml" />
                   </report>
                </emma>
                <!-- commented out from original
                <echo>Cleaning up temporary files...</echo>
                <delete file="coverage.ec" />
                <delete file="coverage.em" />
                -->
                <echo>Saving the report file in ${basedir}/coverage/coverage.html</echo>
            </then>
            <else>
                <run-tests-helper />
            </else>
        </if>
        <!-- added for JUnitReportTestRunner: -->
        <echo>Saving the JUnit test report as ${junit-file}</echo>
        <exec executable="${adb}" failonerror="true">
            <arg line="${adb.device.arg}"/>
            <arg value="pull" />
            <arg value="/data/data/${tested.manifest.package}/files/junit-report.xml" />
            <arg value="${junit-file}" />
        </exec>
    </target>

    <target name="artifacts" description="Copies the apks as unique CloudBees artifacts">
        <fail unless="env.GIT_BRANCH" message="The environment variable GIT_BRANCH must exist." />
        <fail unless="env.GIT_COMMIT" message="The environment variable GIT_COMMIT must exist." />
        <fail unless="env.BUILD_ID" message="The environment variable BUILD_ID must exist." />
        <fail unless="env.BUILD_NUMBER" message="The environment variable BUILD_NUMBER must exist." />

        <regex property="branch" input="${env.GIT_BRANCH}" regexp="(?:.*/)?(.+)" select="\1" global="true" />
        <regex property="commit" input="${env.GIT_COMMIT}" regexp="([\da-fA-F]{10})" select="\1" />

        <!-- calls ../build.xml -->
        <property name="tested.project.absolute.dir" location="${tested.project.dir}" />
        <condition property="my.project.target" value="-artifacti" else="-artifactd">
            <isset property="emma.enabled" />
        </condition>
        <subant target="${my.project.target}" failonerror="true">
            <fileset dir="${tested.project.absolute.dir}" includes="build.xml" />
        </subant>

        <if condition="${build.is.mode.set}">
            <else>
                <runtarget target="-set-debug-files" />
            </else>
        </if>

        <copy file="${out.final.file}"
              tofile="${out.dir}/${ant.project.name}-${branch}-${env.BUILD_ID}-${commit}-${env.BUILD_NUMBER}.apk"
              verbose="on"
        />
    </target>

    <target name="-pre-clean" description="Removes testing output">
        <delete file="${junit-file}" verbose="${verbose}" />
        <delete file="lint-results.xml" verbose="${verbose}" />
        <delete file="lint-results.html" verbose="${verbose}" />
        <delete dir="lint-results_files" verbose="${verbose}" />
        <delete file="coverage.ec" verbose="${verbose}" />
        <delete file="coverage.em" verbose="${verbose}" />
        <delete file="coverage.xml" verbose="${verbose}" />
        <delete dir="coverage" verbose="${verbose}" />
        <delete dir="${javadoc-dir}" verbose="${verbose}" />
    </target>

    <target name="help" depends="android_rules.help">
        <!-- displays starts at col 13
              |13                                                              80| -->
        <echo>Additional targets:</echo>
        <echo>   javadoc:   Javadoc output to javadoc/. ANDROID_HOME environment</echo>
        <echo>              variable must be set (i.e. /opt/android-sdk-linux/).</echo>
        <echo>   lint-xml:  Lint output lint-results.xml.</echo>
        <echo>   lint-html: Lint output to lint-results.html.</echo>
        <echo>   test:      Overridden -- also outputs junit-report.xml.</echo>
        <echo>   artifacts: Copies the apks as unique CloudBees artifacts. Usage:</echo>
        <echo>                  ant [emma] [debug] artifacts</echo>
    </target>

    <!-- common to both build.xml and tests/build.xml -->
    <import file="../build_common.xml" />

    <!-- END K-9 CUSTOM STUFF -->

</project>
